from .context import Context
from .operator import Operator
from datetime import datetime
from .utility import validate_di
from .connections import ConnectionHandler
from .template import ConnectionTemplateSourceToTarget

#import re


class Pipeline(Context):
    def __init__(self, operators: list=[], connections: list=[], name: str=None, desc: str=None, template=None):
        super().__init__()
        self.__operators = None
        self.__pipeline_id = None
        self.__name = name
        self.__desc = desc
        self.__template = template
        for o in operators:
            if not isinstance(o, Operator):
                raise Exception("Operators should contain list of Operator instance")
        self.__operators = operators

        for c in connections:
            if not isinstance(c, ConnectionTemplateSourceToTarget):
                raise Exception("Connections should contain list of ConnectionTemplateSourceToTarget instance")
        self.__connections = connections

        self.__create_pipeline()

    @property
    def operators(self):
        return self.__operators

    @property
    def pipeline_id(self):
        return self.__pipeline_id

    @validate_di
    def __create_pipeline(self):
        if self.__name is None:
            self.__name = self.generate_pipeline_name()
        now = datetime.now()
        pipeline = self.get_di().create_pipeline(self.__name, description="Generated by DI Manager {}".format(now.strftime("%m/%d/%Y, %H:%M:%S")),
                                                        from_template=self.__template)
        self.__pipeline_id = pipeline.id

        self.set_pipeline_byid(pipeline.id)
        self.add_operators()
        self.add_connections()
        self.save()

    @validate_di
    def add_operators(self):
        for op in self.__operators:
            self.get_graph().add_operator(op.operator)
        #self.save()

    @validate_di
    def add_connections(self):
        for c in self.__connections:
            ConnectionHandler(c.src, c.tgt).add_connections()

    @validate_di
    def generate_pipeline_name(self, name: str = None):
        names = [p.name for p in self.get_all_pipelines_in_current_scenario()]
        if name:
            if name in names:
                raise Exception("Pipeline Name {} already exists".format(name))
            else:
                return name
        else:
            gen_name = 'gen-pipeline-{}'
            for i in range(len(names)):
                if gen_name.format(i + 1) not in names:
                    gen_name = gen_name.format(i + 1)
                    break

            return gen_name.format(i + 1)





